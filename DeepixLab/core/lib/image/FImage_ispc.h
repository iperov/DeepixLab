//
// D:\Develop\python\DeepixLab\_internal\github_project\DeepixLab\core\lib\image\FImage_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void add_f32_f32(float * O, const float * A, const float * B, uint32_t size);
    extern void add_f32_u8(float * O, const float * A, const uint8_t * B, uint32_t size);
    extern void add_u8_f32(uint8_t * O, const uint8_t * A, const float * B, uint32_t size);
    extern void add_u8_u8(uint8_t * O, const uint8_t * A, const uint8_t * B, uint32_t size);
    extern void blend_f32(float * O, uint32_t OH, uint32_t OW, uint32_t OC, float * A, float * B, uint32_t BH, uint32_t BW, uint32_t BC, float * M, uint32_t MH, uint32_t MW, uint32_t MC, float alpha);
    extern void blend_u8(uint8_t * O, uint32_t OH, uint32_t OW, uint32_t OC, uint8_t * A, float * B, uint32_t BH, uint32_t BW, uint32_t BC, float * M, uint32_t MH, uint32_t MW, uint32_t MC, float alpha);
    extern void channel_exposure_f32(float * O, float * I, uint32_t H, uint32_t W, uint32_t C, float * exposure);
    extern void channel_exposure_u8(uint8_t * O, uint8_t * I, uint32_t H, uint32_t W, uint32_t C, float * exposure);
    extern void f32_to_u8(uint8_t * O, const float * I, uint32_t size);
    extern void hsv_shift_f32(float * O, float * I, uint32_t H, uint32_t W, uint32_t C, float h_offset, float s_offset, float v_offset);
    extern void hsv_shift_u8(uint8_t * O, uint8_t * I, uint32_t H, uint32_t W, uint32_t C, float h_offset, float s_offset, float v_offset);
    extern void levels_f32(float * O, const float * I, uint32_t H, uint32_t W, uint32_t C, const float * in_b, const float * in_w, const float * in_g, const float * out_b, const float * out_w);
    extern void levels_u8(uint8_t * O, const uint8_t * I, uint32_t H, uint32_t W, uint32_t C, const float * in_b, const float * in_w, const float * in_g, const float * out_b, const float * out_w);
    extern void mul_f32_f32(float * O, const float * A, const float * B, uint32_t size);
    extern void mul_f32_u8(float * O, const float * A, const uint8_t * B, uint32_t size);
    extern void mul_u8_f32(uint8_t * O, const uint8_t * A, const float * B, uint32_t size);
    extern void mul_u8_u8(uint8_t * O, const uint8_t * A, const uint8_t * B, uint32_t size);
    extern void satushift_f32(float * O, float * I, uint32_t size);
    extern void satushift_u8(uint8_t * O, uint8_t * I, uint32_t size);
    extern void sub_f32_f32(float * O, const float * A, const float * B, uint32_t size);
    extern void sub_f32_u8(float * O, const float * A, const uint8_t * B, uint32_t size);
    extern void sub_u8_f32(uint8_t * O, const uint8_t * A, const float * B, uint32_t size);
    extern void sub_u8_u8(uint8_t * O, const uint8_t * A, const uint8_t * B, uint32_t size);
    extern void u8_to_f32(float * O, const uint8_t * I, uint32_t size);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
